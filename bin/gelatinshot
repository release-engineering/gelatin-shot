#!/usr/bin/env python
import os
from flask import Flask, url_for, request, jsonify
#from flask_kerberos import requires_authentication, init_kerberos
from sqlalchemy import create_engine, update
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, String, Integer, DateTime, Sequence, Boolean, UniqueConstraint
from sqlalchemy.orm import sessionmaker
from sqlalchemy.schema import MetaData, Table, ForeignKeyConstraint
from sqlalchemy.sql.functions import current_timestamp

from ConfigParser import SafeConfigParser
import simplejson as json

class Base(object):
    __table_args__ = {'mysql_engine': 'InnoDB'}

Base = declarative_base(cls=Base)
class RHNObject(Base):
    __tablename__ = 'rhnobjects'

    id = Column(Integer, primary_key=True)
    uri = Column(String)

    def __repr__(self):
        return "<RHNObject(id='%s', uri='%s')>" % (self.id, self.uri)

class ChecksumType(Base):
    __tablename__ = 'checksumtypes'

    typeid = Column(Integer, primary_key=True, autoincrement=True)
    cstype = Column(String)
    size = Column(Integer)

    def __repr__(self):
        return "<checksumtype(typeid='%s', cstype='%s', size='%s')>" % (self.typeid, self.cstype, self.size)

class Checksum(Base):
    __tablename__ = 'checksums'

    keyid = Column(Integer, autoincrement=False)
    active = Column(Boolean)
    typeid = Column(Integer, nullable=False)
    checksum = Column(String)
    checksumsize = Column(Integer)
    userid = Column(Integer)
    date = Column(DateTime, default=current_timestamp())
    pkey = Column(Integer, primary_key=True, autoincrement=True)



    def __repr__(self):
        return "<checksum(keyid='%s', active='%s', typeid='%s', checksum='%s', checksumsize'%s', userid='%s', date='%s', pkey='%s')>" % (self.keyid, self.active, self.typeid, self.checksum, self.checksumsize, self.userid, self.date, self.pkey)


class User(Base):
    __tablename__ = 'users'

    userid = Column(Integer, primary_key=True, autoincrement=True)
    admin = Column(Boolean, default=False)
    email = Column(String)

    def __repr__(self):
        return "<user(userid='%s', admin='%s', email='%s')>" % (self.userid, self.admin, self.email)



parser = SafeConfigParser()
parser.read('/etc/gelatin-shot/gelatin.conf')

dbUsername = parser.get("postgresql", "dbusername")
dbPassword = parser.get("postgresql", "dbpass")
dbURL = parser.get("postgresql", "dburl")
engine = create_engine('postgresql://'+dbUsername+':'+dbPassword+'@'+dbURL+'/gelatin', echo=True)

app = Flask(__name__)

#init_kerberos(app, hostname='REDHAT.COM')
metadata = MetaData()

Session = sessionmaker()
Session.configure(bind=engine)

def startServer():
    metadata.drop_all(engine)

    rhnobjects = Table('rhnobjects', metadata,
        Column('id', Integer, primary_key=True),
        Column('uri', String(256))
    )
    checksumtypes = Table('checksumtypes', metadata,
        Column('typeid', Integer, primary_key=True, autoincrement=True),
        Column('cstype', String(16), unique=True),
        Column('size', Integer),
        UniqueConstraint('typeid', 'size')
    )
    checksums = Table('checksums', metadata,
        Column('keyid', Integer, autoincrement=False),
        Column('active', Boolean),
        Column('typeid', Integer, nullable=False),
        Column('checksum', String),
        Column('checksumsize', Integer),
        Column('userid', Integer),
        Column('date', DateTime, default=current_timestamp()),
        Column('pkey', Integer, primary_key=True),
        ForeignKeyConstraint(['typeid', 'checksumsize'], 
                             ['checksumtypes.typeid', 'checksumtypes.size'],
                             onupdate="CASCADE", ondelete="CASCADE")
    )


    users = Table('users', metadata,
        Column('userid', Integer, primary_key=True, autoincrement=True),
        Column('admin', Boolean),
        Column('email', String)
    )
    metadata.create_all(engine)
#Queries the database for the ID of a URI
#If the URI:ID pair exists in the database, returns the ID
#Otherwise it creates an entry for the URI and gets the generated ID
def getIDFromURI(uri):
    session = Session()

    objectId = session.query(RHNObject, RHNObject.id).filter_by(uri=uri).first()

    if objectId == None:
        newRHNObject = RHNObject(uri = uri)
        session.add(newRHNObject)
        session.commit()
        objectId = session.query(RHNObject, RHNObject.id).filter_by(uri=uri).first().id
    else:
        objectId = objectId.id

    session.close()
    return objectId


#POST takes JSON of the form
#
#{
#    "URI":{
#        "CHECKSUMTYPE":"CHECKSUM",
#        ...
#        },
#    ...
#}
#
#And "upserts" the checksums listed into the appropriate table with the id associated with the uri
#(not a true upsert because it just marks the old one inactive)
#GET lists every URI and its associated data
@app.route("/api/uris", methods=['GET', 'PUT'])
#@requires_authentication
def uris():
    if request.method == 'PUT':
        message = ""
        newEntries = request.get_json()
        session = Session()
#TODO: Get the user from the kerberos info
        user = 1
        for entry in newEntries:
            objectId = getIDFromURI(entry)

            entry = newEntries[entry]

            for checktype in entry:
                checkvalue = entry[checktype]
                typeid = session.query(ChecksumType).filter_by(cstype = checktype).first().typeid
                toUpdate = session.query(Checksum).filter_by(keyid = objectId, typeid = typeid, active = True)
                if toUpdate != None:
                    toUpdate.update({Checksum.active: False}, synchronize_session='evaluate')
                newHashInfo = Checksum(keyid = objectId, active=True, typeid=typeid, checksum = checkvalue, checksumsize = len(checkvalue), userid = user)
                session.add(newHashInfo)
                try:
                    session.commit()
                    message = message + "Successfully submitted!\n"
                except Exception as e:
                    session.rollback()
                    message = message + str(e)
        session.close()
        return message
    elif request.method == 'GET':
        session = Session()
        rhn = session.query(RHNObject).all()
        checksumlist = session.query(Checksum).filter_by(active = True).all()
        session.close()

        rhnlist = {}       

        for rhnobject in rhn:
            keyid = rhnobject.id
            hashes = []
            for checksum in checksumlist:
                if checksum.keyid == keyid:
                    cs = checksum.__dict__
                    del cs['_sa_instance_state']
                    hashes.append(cs)
            rhnlist[rhnobject.uri] = hashes
        return jsonify(rhnlist)

#POST takes json of the form
#{
#    "hashtype": 3,
#    "hashtype2": 4
#}
#GET lists all checksum types and respective data
#TODO: limit POST request to administrators
@app.route("/api/checksumtypes", methods=['GET', 'POST', 'DELETE'])
def checksumtypes():
    if request.method == 'POST':
        newEntries = request.get_json()
        session = Session()
        for checktype in newEntries:
            newChecksumtypeInfo = ChecksumType(cstype=checktype, size=newEntries[checktype])
            session.add(newChecksumtypeInfo)
            try:
                session.commit()
            except:
                pass
        session.close()
        return "Nailed it"

    if request.method == 'GET':
        session = Session()
        checksumtypes = session.query(ChecksumType).all()
        session.close()
        cstlist = {}
        for checksumtype in checksumtypes:
           checksumdict = checksumtype.__dict__
           del checksumdict['_sa_instance_state']
           cstlist[checksumtype.cstype] = checksumdict
        return jsonify(cstlist)
    if request.method == 'DELETE':
        session = Session()
        session.query(ChecksumType).delete(synchronize_session='evaluate')
        session.commit()
        session.close()
#@app.route("/api/checksums/<checksumtype>/convert", methods=['GET'])
#@requires_authentication
#def convert(checksumtype):

if __name__ == "__main__":
    startServer()
    app.run(debug = True)
